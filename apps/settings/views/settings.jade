doctype 5
html(lang="en")
	head
		title MediacenterJS - Settings
		link(rel='stylesheet', href='//fonts.googleapis.com/css?family=Open+Sans+Condensed:300|Open+Sans')
		link(rel='stylesheet', href='/core/css/style.css')
		link(rel='stylesheet', href='/core/css/jquery-ui-1.10.3.custom.min.css') 
		link(rel='stylesheet', href='/themes/'+selectedTheme)
		link(rel='stylesheet', href='/settings/css/style.css')
		
		script(src="/core/js/jquery-1.8.2.min.js")
		script(src="/core/js/jquery-ui-1.10.3.min.js")
		
		script(src="/core/js/plugins/jquery.idle-timer.js")
		script(src="/core/js/plugins/jquery.i18n.properties.-1.0.9.js")
		script(src="/core/js/jquery.mcjs.core.js")
		script(src='/core/js/oauth.min.js')
		
		script(src="/core/js/plugins/jquery.prettyForm.js")
		script(src="/core/js/plugins/jquery.keyboard.min.js")
		
		script(src="/core/js/plugins/validation/jquery.validate.min.js")
		script(src="/core/js/plugins/validation/jquery.validate.defaults.js")
		script(src="/core/js/plugins/validation/jquery.validate.rules.js")
		
		script.
			$(function() {
				$('body').mcjs();
				$('.validate-form').validate();
				$("[type=checkbox], [type=radio]").prettyForm();
				
				var usekeyboard= $('#hiddenSetting').find('p').html();
				if ( usekeyboard == 'yes' ){
					$('.keyboard').keyboard();
				}
				
				$('#theme').find('option').each(function(){
					var cleanedThemeName = $(this).html().replace(/\.(css)/i,"");
					$(this).text(cleanedThemeName)
				});
				$('a#oauth').click(function (e) {
					e.preventDefault();
					// TODO need to make this configurable
					OAuth.initialize($('input#oauthKey').val());
					OAuth.popup('youtube', function (error, oauthData){
						if(error instanceof Error) {
							$('label[for="oauthKey"]').text(error.message);
							$('img#ex').fadeIn('fast').css('display', 'inline-block');
						} else {
							// TODO if they don't have local storage, then do something else (but who doesn't have localStorage now anyways?!)
							localStorage.setItem('oauth_token', oauthData.access_token);
							localStorage.setItem('oauth_key', $('input#oauthKey').val());
							$('input.oauth').val(localStorage.getItem('oauth_token'));
							$('input.oauthKeyHidden').val(localStorage.getItem('oauth_key'));
							$('img#check').fadeIn('fast').css('display', 'inline-block');
						}
					});
				});
				if(localStorage.getItem('oauth_token')) {
					$('img#check').show().css('display', 'inline-block');
					$('input.oauth').val(localStorage.getItem('oauth_token'));
					$('input.oauthKeyHidden').val(localStorage.getItem('oauth_key'));
				} else {
					getStoredToken(function (error, data) {
						if(!error) {
							localStorage.setItem('oauth_token', data.token);
							$('img#check').show().css('display', 'inline-block');
							$('input.oauth').val(data.token);
							$('input.oauthKeyHidden').val(localStorage.getItem('oauth_key'));
						}
					});
				}
				$('img#helpCircle').click(function (e) {
					e.preventDefault();
					window.open('https://oauth.io/docs/getting-started', '_blank');
				})
			});
			// Get token that's stored on the server-side config which we submitted earlier
			function getStoredToken(callback) {
				$.ajax({
					type: "GET",
					url: "/getToken",
					success: function (data) {
						return callback(null, data);
					},
					error: function (jqXHR, textStatus, errorThrown) {
						return callback(jqXHR.responseText);
					}
				});
			}
	body
		#hiddenSetting
			p= onscreenkeyboard
		#header.settings
			a.backlink(href="/") 
				img(src="/core/icons/back.png")
			h1  #{lingua.settings}		
		#wrapper
			.ui-widget
				.ui-state-highlight.ui-corner-all
					span.ui-icon.ui-icon-alert
					.message 
			h2 Cache
			hr
			.row
				a.btn.cachelink(href="",data-cachelink="movies") #{lingua.settings_clear_cache_movies}
				a.btn.cachelink(href="",data-cachelink="music") #{lingua.settings_clear_cache_music}
				a.btn.cachelink(href="",data-cachelink="tv") #{lingua.settings_clear_cache_tv}
			#settings
				h2#oauthTitle OAuth
				span
					img#helpCircle(src="/core/icons/helpCircle.png")
				hr
				div#oauthContainer
					input#oauthKey(name="oauthKey" type="text", placeholder="OAuth.io Key")
					a.btn#oauth(href="#") Register OAuth
					img#check(src="/core/icons/check.png")
					img#ex(src="/core/icons/ex.png")
					label(for="oauthKey")
				h2 Settings
				hr
				form#setup.validate-form(action='/submit',method='post')
					input.oauth(name="oauth" type="hidden")
					input.oauthKeyHidden(name="oauthKey" type="hidden")
					.row
						label #{lingua.setting_movielocation}
						input.keyboard(name="movielocation",type="text",placeholder="C:/temp/ or /mnt/media/hdd/movies/", value= movielocation, data-rule-required="true", data-rule-path="true",  data-msg-path="Specify a valid path. Please end with a slash.")
					.row
						label #{lingua.setting_musiclocation}
						input.keyboard(name="musiclocation",type="text",placeholder="C:/temp/ or /mnt/media/hdd/music/", value= musiclocation, data-rule-required="true", data-rule-path="true",  data-msg-path="Specify a valid path. Please end with a slash.")	
					.row
						label #{lingua.setting_tvlocation}
						input.keyboard(name="tvlocation",type="text",placeholder="C:/temp/ or /mnt/media/hdd/movies/", value= tvlocation, data-rule-required="true", data-rule-path="true",  data-msg-path="Specify a valid path. Please end with a slash.")
					.row
						span.label #{lingua.setting_screensaver}
						.checkgroup
							- if(screensaver === 'dim')
								input#dimYes(name="screensaver",type="radio",value="dim",checked) 
								label(for="dimYes") #{lingua.setting_yes}
								input#dimNo(name="screensaver",type="radio",value="off") 
								label(for="dimNo") #{lingua.setting_no}
							- else 
								input#dimYes(name="screensaver",type="radio",value="dim") 
								label(for="dimYes") #{lingua.setting_yes}
								input#dimNo(name="screensaver",type="radio",value="off",checked) 
								label(for="dimNo") #{lingua.setting_no}
					.row
						span.label #{lingua.setting_keyboard}
						.checkgroup
							- if(onscreenkeyboard == "true")
								input#yeskeyboard(name="usekeyboard",type="radio",value="true",checked) 
								label(for="yeskeyboard") #{lingua.setting_yes}
								input#nokeyboard(name="usekeyboard",type="radio",value="false") 
								label(for="nokeyboard") #{lingua.setting_no}
							- else
								input#yeskeyboard(name="usekeyboard",type="radio",value="true") 
								label(for="yeskeyboard") #{lingua.setting_yes}
								input#nokeyboard(name="usekeyboard",type="radio",value="false",checked) 
								label(for="nokeyboard") #{lingua.setting_no}
					.row
						label #{lingua.setting_language}
						input.keyboard(name="language",type="text",placeholder="ie nl or gb", value= language ,data-rule-required="true", data-rule-language="true", data-msg-language="EN, FR and NL are currently supported")
					.row
						label #{lingua.setting_location}
						input.keyboard(name="location",type="text",placeholder="ie london or amsterdam", value= location,data-rule-required="true")					
					.row
						label Spotify Username
						input.keyboard(name="spotifyUser",type="text", value=spotifyUser)					
					.row
						label Spotify Password
						input.keyboard(name="spotifyPass",type="password", value=spotifyPass)	
					.row
						label #{lingua.setting_theme}
						select#theme(name="theme")
							- for theme in themes
								option(selected=theme) #{theme}
					.row
						label #{lingua.setting_port}
						input.keyboard(name="port",type="text",placeholder="ie 3000 or 1337", value= port ,data-rule-required="true")
					.row
						input(type="submit",value="#{lingua.setting_submit}")	